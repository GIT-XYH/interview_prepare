如果Flink中的Task是一直不停的运行的话，那么拉取Kafka数据的Source端是不是会一直不停的拉取数据，如果消费速度不及时，内存不就很快会被撑爆了么？

反压会导致流处理作业数据延迟的增加，同时还会影响到Checkpoint。由于Flink的Checkpoint机制需要进行Barrier对齐，
如果此时某个Task出现了反压，Barrier流动的速度就会变慢，导致Checkpoint整体时间变长，如果反压很严重，还有可能导致Checkpoint超时失败。

长期或者频繁出现反压才需要处理，如果只是由于网络波动或者正常GC出现的偶尔反压可以不必处理。

反压如何解决：
    定位到反压的Task之后，可以根据Task中具体执行的内容来进行相应的处理。大部分情况反压是由于用户代码的执行效率问题
    (用户代码对一条数据的处理太慢了，例如每条数据都要调用算法，而调用算法运算耗时又很长) 或者数据倾斜引起的。
    如果是用户代码的执行效率引起的，可以通过增加并发度或者其他资源的方式来缓解反压。如果是数据倾斜引起的，可以对数据进行一次KeyBy之类的操作来解决。
