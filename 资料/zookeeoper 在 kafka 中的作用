1. broker 的注册
    broker 是分布式部署并且相互之间相互独立, 但是需要有一个注册系统能够将整个集群中的 broker 管理起来, 此时就用到了 zookeeper
    在 zookeeper 上会有一个专门用来进行 broker 服务器列表记录的节点
2. topic 的注册
    在 kafka 中, 同一个 topic 的消息会被分成多个分区并且将其分布在多个 broker 上, 这些分区信息以及与 broker 的对应关系也都是
    有 zookeeper 进行维护的
3. 生产者的负载均衡
    由于同一个 topic 消息会被分区并且分区在多个 broker 上, 因此, 生产者需要将消息合理的发送到这些分布式的 broker 上
4. 消费者的负载均衡
    与生产者类似, kafka 中的消费者同样需要进行负载均衡来实现多个消费者合理的从对应的 broker 服务器上接受消息, 每个消费者分组
    包含多个消费者, 不同的消费者组消费自己特定 topic 下的消息, 互不干扰
5. 消息消费进度 offset 记录
    在消费者对指定消息进行分区消费的过程中, 需要定时的将分区消息的消费进度 offset 记录到 zookeeper 上, 以便在该消费者进行重启
    或者其他消费者重新接管该消息分区的消息消费记录后, 能够从之前的进度开始继续进行消息消费